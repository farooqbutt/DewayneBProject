#pragma checksum "C:\Online Drives\OneDrive\Fiverr Tasks Completed\dblow1\QuestionsManagementApp\QuestionsManagementApp\Views\Home\Dashboard.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "404cc15aa255a83fc1a267dcc21b3945f0a7126a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Dashboard), @"mvc.1.0.view", @"/Views/Home/Dashboard.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Online Drives\OneDrive\Fiverr Tasks Completed\dblow1\QuestionsManagementApp\QuestionsManagementApp\Views\_ViewImports.cshtml"
using QuestionsManagementApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Online Drives\OneDrive\Fiverr Tasks Completed\dblow1\QuestionsManagementApp\QuestionsManagementApp\Views\_ViewImports.cshtml"
using QuestionsManagementApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"404cc15aa255a83fc1a267dcc21b3945f0a7126a", @"/Views/Home/Dashboard.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4010a59236c04fb7e49754f0b1aaa556e3735b1f", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Dashboard : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/Charts/highcharts.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Online Drives\OneDrive\Fiverr Tasks Completed\dblow1\QuestionsManagementApp\QuestionsManagementApp\Views\Home\Dashboard.cshtml"
  
    ViewData["Title"] = "Dashboard";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<span id=""department"" class=""badge badge-pill badge-success"" style=""float:right""></span>
<h1>Dashboard</h1>
<div class=""row"" style=""margin-bottom:5px"">
    <div class=""col-md-9"">

    </div>
    <div class=""col-md-3"">
       Monthly Record: <input id=""MonthlyRecord"" type=""month"" class=""form-control"" 
               style=""float:right"" title=""For Seeing Monthly Statics"" onchange=""MonthlyRecord()"" />
    </div>
</div>

<div class=""row"">
    <div class=""col-md-3"">
        <div class=""card border-dark mb-3"">
            <div class=""card-body"">
                <h4 class=""card-title"">Total Questions</h4>
                <h2 class=""card-text"" id=""totalQuestions""></h2>
            </div>
        </div>
    </div>
    <div class=""col-md-3"">
        <div class=""card border-dark mb-3"">
            <div class=""card-body"">
                <h4 class=""card-title"">Submitted Today</h4>
                <h2 class=""card-text"" id=""totalQuestionSubmitted""></h2>
            </div>
        </div>
    </");
            WriteLiteral(@"div>
    <div class=""col-md-3"">
        <div class=""card border-dark mb-3"">
            <div class=""card-body"">
                <h4 class=""card-title"">Answered</h4>
                <h2 class=""card-text"" id=""Answered""></h2>
            </div>
        </div>
    </div>
    <div class=""col-md-3"">
        <div class=""card border-dark mb-3"">
            <div class=""card-body"">
                <h4 class=""card-title"">UnAnswered</h4>
                <h2 class=""card-text"" id=""UnAnswered""></h2>
            </div>
        </div>
    </div>
</div>





<div id=""container"">

</div>


<style>
    .card:hover {
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    h2 {
        text-align: center;
    }

    h4 {
        text-align: center;
    }
</style>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "404cc15aa255a83fc1a267dcc21b3945f0a7126a6553", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "404cc15aa255a83fc1a267dcc21b3945f0a7126a7592", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "404cc15aa255a83fc1a267dcc21b3945f0a7126a8631", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>

    function MonthlyRecord() {
        $.post(""/Home/DashboardData"",{ dateTime: document.getElementById(""MonthlyRecord"").value}, function (data) {
            var realdata = data.split(""::"");
            debugger
            var ChartData = [];
            if (realdata.length == 14) {
                document.getElementById(""totalQuestions"").innerHTML = realdata[9];
                document.getElementById(""totalQuestionSubmitted"").innerHTML = realdata[10];
                document.getElementById(""Answered"").innerHTML = realdata[11];
                document.getElementById(""UnAnswered"").innerHTML = realdata[12];
                document.getElementById(""department"").innerHTML = realdata[13];
                ChartData = [{
                    name: 'Reassign Case',
                    y: parseInt(realdata[0])
                }, {
                    name: 'Possible Reopen',
                    y: parseInt(realdata[1]),
                    color: '#32AE47'
                }, {
   ");
            WriteLiteral(@"                 name: 'Letter Update',
                    y: parseInt(realdata[2]),
                    color: '#DB4D4D'
                }, {
                    name: 'Police Report',
                    y: parseInt(realdata[3])
                }, {
                    name: 'Vaccation Ovveride',
                    y: parseInt(realdata[4])
                }, {
                    name: 'Peer to Peer Request',
                    y: parseInt(realdata[5]),
                    color: 'rgb(67, 67, 72)'
                }, {
                    name: 'Cased Approved in Error',
                    y: parseInt(realdata[6])
                }, {
                    name: 'Case Denied in Error',
                    y: parseInt(realdata[7])
                }, {
                    name: 'Other',
                    y: parseInt(realdata[8]),
                    color: 'rgb(67, 67, 72)'
                }]
            } else if (realdata.length == 11) {
                document.getElementById(""t");
            WriteLiteral(@"otalQuestions"").innerHTML = realdata[6];
                document.getElementById(""totalQuestionSubmitted"").innerHTML = realdata[7];
                document.getElementById(""Answered"").innerHTML = realdata[8];
                document.getElementById(""UnAnswered"").innerHTML = realdata[9];
                document.getElementById(""department"").innerHTML = realdata[10];
                ChartData = [{
                    name: 'Override Over Cost Limit',
                    y: parseInt(realdata[0])
                }, {
                    name: 'Peer to Peer Request',
                    y: parseInt(realdata[1]),
                    color: '#32AE47'
                }, {
                    name: 'Request for Rework',
                    y: parseInt(realdata[2]),
                    color: '#DB4D4D'
                }, {
                    name: 'Approval Date Error',
                    y: parseInt(realdata[3])
                }, {
                    name: 'Lost Medication',
                  ");
            WriteLiteral(@"  y: parseInt(realdata[4])
                }, {
                    name: 'Vacation Override',
                    y: parseInt(realdata[5]),
                    color: 'rgb(67, 67, 72)'
                }]
            } else {
                document.getElementById(""totalQuestions"").innerHTML = realdata[5];
                document.getElementById(""totalQuestionSubmitted"").innerHTML = realdata[6];
                document.getElementById(""Answered"").innerHTML = realdata[7];
                document.getElementById(""UnAnswered"").innerHTML = realdata[8];
                document.getElementById(""department"").innerHTML = realdata[9];
                ChartData = [{
                    name: 'J-Code Update',
                    y: parseInt(realdata[0])
                }, {
                    name: 'S-Code Update',
                    y: parseInt(realdata[1]),
                    color: '#32AE47'
                }, {
                    name: 'Nebulizer Solution',
                    y: parseInt(r");
            WriteLiteral(@"ealdata[2]),
                    color: '#DB4D4D'
                }, {
                    name: 'Medical Procedure',
                    y: parseInt(realdata[3])
                }, {
                    name: 'Other',
                    y: parseInt(realdata[4])
                }]
            }

            Highcharts.chart('container', {
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: null,
                    type: 'pie'
                },
                legend: {
                    align: 'right',
                    layout: 'vertical',
                    verticalAlign: 'middle',
                    labelFormatter: function () {
                        return this.name + ' - ' + this.y;
                    }
                },
                title: {
                    text: null
                },
                tooltip: {
                    useHTML: true,
             ");
            WriteLiteral(@"       formatter: function () {
                        return '<div>Status : ' + this.point.name + '</div><div style=""text-align:center;"">Count : ' + this.point.y + '</div>';
                    }
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: false,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: Highcharts.theme && Highcharts.theme.contrastTextColor || 'black'
                            }
                        },
                        showInLegend: true
                    }
                },
                credits: {
                    enabled: false
                },
                series: ChartData
            });
        });
    }

    $(document).ready(function (");
            WriteLiteral(@") {
        $.post(""/Home/DashboardData"", function (data) {
            var realdata = data.split(""::"");
            var ChartData = [];
            if (realdata.length == 14) {
                document.getElementById(""totalQuestions"").innerHTML = realdata[9];
                document.getElementById(""totalQuestionSubmitted"").innerHTML = realdata[10];
                document.getElementById(""Answered"").innerHTML = realdata[11];
                document.getElementById(""UnAnswered"").innerHTML = realdata[12];
                document.getElementById(""department"").innerHTML = realdata[13];
                ChartData = [{
                    name: 'Reassign Case',
                    y: parseInt(realdata[0])
                }, {
                    name: 'Possible Reopen',
                    y: parseInt(realdata[1]),
                    color: '#32AE47'
                }, {
                    name: 'Letter Update',
                    y: parseInt(realdata[2]),
                    color: '#DB4D4D");
            WriteLiteral(@"'
                }, {
                    name: 'Police Report',
                    y: parseInt(realdata[3])
                }, {
                    name: 'Vaccation Ovveride',
                    y: parseInt(realdata[4])
                }, {
                    name: 'Peer to Peer Request',
                    y: parseInt(realdata[5]),
                    color: 'rgb(67, 67, 72)'
                }, {
                    name: 'Cased Approved in Error',
                    y: parseInt(realdata[6])
                }, {
                    name: 'Case Denied in Error',
                    y: parseInt(realdata[7])
                }, {
                    name: 'Other',
                    y: parseInt(realdata[8]),
                    color: 'rgb(67, 67, 72)'
                }]
            } else if (realdata.length == 11) {
                document.getElementById(""totalQuestions"").innerHTML = realdata[6];
                document.getElementById(""totalQuestionSubmitted"").innerHTML = rea");
            WriteLiteral(@"ldata[7];
                document.getElementById(""Answered"").innerHTML = realdata[8];
                document.getElementById(""UnAnswered"").innerHTML = realdata[9];
                document.getElementById(""department"").innerHTML = realdata[10];
                ChartData = [{
                    name: 'Override Over Cost Limit',
                    y: parseInt(realdata[0])
                }, {
                    name: 'Peer to Peer Request',
                    y: parseInt(realdata[1]),
                    color: '#32AE47'
                }, {
                    name: 'Request for Rework',
                    y: parseInt(realdata[2]),
                    color: '#DB4D4D'
                }, {
                    name: 'Approval Date Error',
                    y: parseInt(realdata[3])
                }, {
                    name: 'Lost Medication',
                    y: parseInt(realdata[4])
                }, {
                    name: 'Vacation Override',
                    y: pa");
            WriteLiteral(@"rseInt(realdata[5]),
                    color: 'rgb(67, 67, 72)'
                }]
            } else {
                document.getElementById(""totalQuestions"").innerHTML = realdata[5];
                document.getElementById(""totalQuestionSubmitted"").innerHTML = realdata[6];
                document.getElementById(""Answered"").innerHTML = realdata[7];
                document.getElementById(""UnAnswered"").innerHTML = realdata[8];
                document.getElementById(""department"").innerHTML = realdata[9];
                ChartData = [{
                    name: 'J-Code Update',
                    y: parseInt(realdata[0])
                }, {
                    name: 'S-Code Update',
                    y: parseInt(realdata[1]),
                    color: '#32AE47'
                }, {
                    name: 'Nebulizer Solution',
                    y: parseInt(realdata[2]),
                    color: '#DB4D4D'
                }, {
                    name: 'Medical Procedure',
 ");
            WriteLiteral(@"                   y: parseInt(realdata[3])
                }, {
                    name: 'Other',
                    y: parseInt(realdata[4])
                }]
            }

            /////////The data for HighChart Detailings

            Highcharts.chart('container', {
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: null,
                    type: 'pie'
                },
                legend: {
                    align: 'right',
                    layout: 'vertical',
                    verticalAlign: 'middle',
                    labelFormatter: function () {
                        return this.name + ' - ' + this.y;
                    }
                },
                title: {
                    text: null
                },
                tooltip: {
                    useHTML: true,
                    formatter: function () {
                        return '");
            WriteLiteral(@"<div>Status : ' + this.point.name + '</div><div style=""text-align:center;"">Count : ' + this.point.y + '</div>';
                    }
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: false,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: Highcharts.theme && Highcharts.theme.contrastTextColor || 'black'
                            }
                        },
                        showInLegend: true
                    }
                },
                credits: {
                    enabled: false
                },
                series: [{
                    colorByPoint: true,
                    allowPointSelect: true,

                    data: ChartData
                }]");
            WriteLiteral("\r\n            });\r\n        });\r\n    });\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
